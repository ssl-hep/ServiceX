# Copyright (c) 2019, IRIS-HEP
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import ast
import os
import shutil
import zipfile
from collections import namedtuple
from tempfile import TemporaryDirectory
from typing import Optional, Union
from pathlib import Path

from func_adl_xAOD.atlas.xaod.executor import atlas_xaod_executor
from func_adl_xAOD.cms.aod.executor import cms_aod_executor
from func_adl_xAOD.common.executor import executor
from qastle import text_ast_to_python_ast

GeneratedFileResult = namedtuple('GeneratedFileResult', 'hash output_dir')


class GenerateCodeException(BaseException):
    """Custom exception for top level code generation exceptions"""

    def __init__(self, message: str):
        BaseException.__init__(self, message)


class AstTranslator:
    def __init__(self, executor: Optional[Union[executor, str]] = None):
        '''
        Create the ast translator objects

        Arguments

            executor    The object that will do the translation if an executor is specified or
                        if its a string then appropriate executor is chosen
        '''
        if isinstance(executor, str) or executor is None:
            if executor == 'CMS AOD':
                self._exe = cms_aod_executor()
            elif executor == 'ATLAS xAOD':
                self._exe = atlas_xaod_executor()
            else:
                raise ValueError(f'The executor name, {executor}, must be "CMS AOD" or "ATLAS xAOD" only.')
        else:
            self._exe = executor

    @property
    def executor(self):
        return self._exe

    def _zipdir(self, dir: Path, zip_handle: zipfile.ZipFile) -> None:
        """Given a `path` to a directory, zip up its contents into a zip file.

        Arguments:
            path        Path to a local directory. The contents will be put into the zip file
            zip_handle  The zip file handle to write into.
        """
        for root, _, files in os.walk(dir):
            for file in files:
                zip_handle.write(os.path.join(root, file), file)

    def get_generated_xAOD(self, a: ast.AST, query_dir: Path):
        if not query_dir.exists():
            query_dir.mkdir(parents=True, exist_ok=True)

        self._exe.write_cpp_files(
            self._exe.apply_ast_transformations(a), query_dir)

    def translate_text_ast_to_zip(self, code: str) -> bytes:
        """Translate a text ast into a zip file as a memory stream

        Arguments:
            code            Text `qastle` version of the input ast generated by func_adl

        Returns
            bytes       Data that if written as a binary output would be a zip file.
        """

        if len(code) == 0:
            raise GenerateCodeException("Requested codegen for an empty string.")

        body = text_ast_to_python_ast(code).body
        print("------>", code, body)
        if len(body) != 1:
            raise GenerateCodeException(
                f'Requested codegen for "{code}" yielded no code statements (or too many).')  # noqa: E501
        a = body[0].value

        # Generate the C++ code
        with TemporaryDirectory() as tempdir:
            loc = Path(tempdir) / 'hash'
            self.get_generated_xAOD(a, loc)

            # Transfer the templated pilot bash script
            shutil.copyfile("/home/servicex/servicex/templates/transform_single_file.sh",
                            os.path.join(loc, "transform_single_file.sh"))

            # Zip up everything in the directory - we are going to ship it as back as part
            # of the message.
            z_filename = Path(tempdir) / 'joined.zip'
            zip_h = zipfile.ZipFile(z_filename, 'w', zipfile.ZIP_DEFLATED)
            self._zipdir(loc, zip_h)
            zip_h.close()

            with z_filename.open('rb') as b_in:
                return b_in.read()
