apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-flask-config
  labels:
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app: {{ .Release.Name }}
data:
  app.conf: |
    INSTANCE_NAME = '{{ .Release.Name }}'
    
    CHART = '{{ .Chart.Name }}-{{ .Chart.Version }}'
    APP_IMAGE_TAG = '{{ .Values.app.tag }}'

    #SERVER_NAME = '127.0.0.1:5000'
    # this is the session secret, used to protect the Flask session. You should
    # use a longer secret string known only to your application
    # details are beyond the scope of this example
    SECRET_KEY = 'abc123!'

    # Base url of documentation - autopopulated from chart version
    # Must be activated at https://readthedocs.org/projects/servicex/versions/
    DOCS_BASE_URL = 'https://servicex.readthedocs.io/en/{{- ternary "latest" (printf "v%s" .Chart.AppVersion) (eq .Chart.AppVersion "develop") }}'

    # Enable JWT auth on public endpoints
    ENABLE_AUTH={{- ternary "True" "False" .Values.app.auth }}

    # Globus configuration
    GLOBUS_CLIENT_ID = '{{ .Values.app.globusClientID }}'
    GLOBUS_CLIENT_SECRET = '{{ .Values.app.globusClientSecret }}'

    # Specify an email address for the first admin user
    JWT_ADMIN = '{{ .Values.app.adminEmail }}'

    # Number of seconds the JWT is valid for
    JWT_REFRESH_TOKEN_EXPIRES={{- ternary .Values.app.tokenExpires "False" .Values.app.tokenExpires }}
    JWT_ACCESS_TOKEN_EXPIRES={{ .Values.app.authExpires }}

    # Slack webhooks
    {{ if .Values.app.slackSigningSecret }}
    SLACK_SIGNING_SECRET = '{{ .Values.app.slackSigningSecret }}'
    {{ end }}
    {{ if .Values.app.newSignupWebhook }}
    SIGNUP_WEBHOOK_URL = '{{ .Values.app.newSignupWebhook }}'
    {{ end }}

    # Mailgun configuration
    MAILGUN_API_KEY = '{{ .Values.app.mailgunApiKey }}'
    MAILGUN_DOMAIN = '{{ .Values.app.mailgunDomain }}'

    {{ if .Values.postgres.enabled }}
    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:{{ .Values.postgresql.global.postgresql.auth.postgresPassword }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.global.postgresql.auth.database }}'
    {{ else }}
    SQLALCHEMY_DATABASE_URI = 'sqlite:////sqlite/app.db'
    {{ end }}

    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = 'some-secret-string'
    JWT_SECRET_KEY = 'jwt-secret-string'
    RABBIT_MQ_URL= 'amqp://user:{{ .Values.rabbitmq.auth.password }}@{{ .Release.Name }}-rabbitmq:5672/%2F'
    TRANSFORMER_RABBIT_MQ_URL= 'amqp://user:{{ .Values.rabbitmq.auth.password }}@{{ .Release.Name }}-rabbitmq:5672/%2F?heartbeat=9000'

    # Keep retrying to connect to Rabbit if its not yet up
    RABBIT_RETRIES = {{ .Values.app.rabbitmq.retries }}
    RABBIT_RETRY_INTERVAL = {{ .Values.app.rabbitmq.retry_interval }}

    ADVERTISED_HOSTNAME= '{{ .Release.Name }}-servicex-app:8000'

    {{ if .Values.hostMount }}
    # This will be mounted into the transformer pod's /data directory
    TRANSFORMER_LOCAL_PATH="{{ .Values.hostMount }}"
    {{ end }}

    TRANSFORMER_NAMESPACE="{{ .Release.Namespace }}"

    {{ if .Values.transformer.priorityClassName }}
    TRANSFORMER_PRIORITY_CLASS="{{ .Values.transformer.priorityClassName }}"
    {{ end }}

    TRANSFORMER_MANAGER_ENABLED = True

    TRANSFORMER_CACHE_PREFIX = "{{ .Values.transformer.cachePrefix }}"
    TRANSFORMER_AUTOSCALE_ENABLED = {{- ternary "True" "False" .Values.transformer.autoscaler.enabled }}
    TRANSFORMER_CPU_LIMIT = {{ .Values.transformer.cpuLimit }}
    TRANSFORMER_CPU_SCALE_THRESHOLD = {{ .Values.transformer.autoscaler.cpuScaleThreshold }}
    TRANSFORMER_MIN_REPLICAS = {{ .Values.transformer.autoscaler.minReplicas }}
    TRANSFORMER_MAX_REPLICAS = {{ .Values.transformer.autoscaler.maxReplicas }}
    TRANSFORMER_MANAGER_MODE = 'internal-kubernetes'
    {{- if not .Values.noCerts }}
    TRANSFORMER_X509_SECRET="{{ .Release.Name }}-x509-proxy"
    {{- else }}
    TRANSFORMER_X509_SECRET=None
    {{- end }}
    TRANSFORMER_VALIDATE_DOCKER_IMAGE = {{- ternary "True" "False" .Values.app.validateTransformerImage }}
    TRANSFORMER_MESSAGING = 'none'
    
    TRANSFORMER_SIDECAR_IMAGE = "{{ .Values.transformer.sidecarImage }}:{{ .Values.transformer.sidecarTag }}"
    TRANSFORMER_SIDECAR_PULL_POLICY = '{{ .Values.transformer.sidecarPullPolicy }}'

    TRANSFORMER_SCIENCE_IMAGE_PULL_POLICY = '{{ .Values.transformer.scienceContainerPullPolicy }}'

    
    TRANSFORMER_SIDECAR_VOLUME_PATH = "{{ .Values.transformer.outputDir }}"
    TRANSFORMER_LANGUAGE = "{{ .Values.transformer.language }}"
    TRANSFORMER_EXEC = "{{ .Values.transformer.exec }}"

    TRANSFORMER_PERSISTENCE_PROVIDED_CLAIM = "{{ .Values.transformer.persistence.existingClaim }}"
    TRANSFORMER_PERSISTENCE_SUBDIR = "{{ .Values.transformer.persistence.subdir}}"


    {{ if .Values.objectStore.enabled }}
    OBJECT_STORE_ENABLED = True
    # default to using a https connection to the client unless explicitly
    # turned off
      {{ if .Values.objectStore.publicClientUseTLS  }}
    MINIO_ENCRYPT_PUBLIC = True
      {{ else }}
    MINIO_ENCRYPT_PUBLIC = False
      {{ end }}
      {{ if not .Values.objectStore.internal }}
    # using external minio 
    MINIO_URL = '{{ .Values.objectStore.publicURL }}'
    MINIO_URL_TRANSFORMER = '{{ .Values.objectStore.publicURL }}'
    MINIO_PUBLIC_URL = '{{ .Values.objectStore.publicURL }}'
    MINIO_ENCRYPT = {{ ternary "True" "False" .Values.objectStore.useTLS }}
      {{ else }}
    # using internal minio 
    MINIO_URL = '{{ .Release.Name }}-minio:{{ .Values.minio.service.ports.api }}'
    MINIO_URL_TRANSFORMER = '{{ .Release.Name }}-minio:{{ .Values.minio.service.ports.api }}'
        {{ if .Values.minio.apiIngress.enabled }}
    # Using minio ingress
    MINIO_PUBLIC_URL = '{{ .Values.objectStore.publicURL | default .Values.minio.apiIngress.hostname }}'
    MINIO_ENCRYPT = {{ ternary "True" "False" .Values.objectStore.useTLS }}
        {{ else }}
    {{- $internal_minio := printf "%s-minio:%v" .Release.Name .Values.minio.service.ports.api -}}
    # No minio ingress
    MINIO_PUBLIC_URL = '{{- .Values.objectStore.publicURL | default $internal_minio }}'
        {{ end }}
      {{ end }}
    MINIO_ACCESS_KEY = '{{ .Values.minio.auth.rootUser }}'
    MINIO_SECRET_KEY = '{{ .Values.minio.auth.rootPassword }}'

    {{ else }}
    # no object store
    OBJECT_STORE_ENABLED = False
    {{ end }}

    {{ if .Values.codeGen }}
    {{- $code_gen_service_urls := list }}
    {{- $code_gen_images := list }}
    {{- $transformer_images := list }}
    {{- range $codeGenName, $v := .Values.codeGen }}
         {{- if .enabled }}
         {{- $codeGenUrl := printf "http://%s-code-gen-%s:8000" $.Release.Name $codeGenName }}
         {{- $dictItem := printf "\"%s\":\"%s\"" $codeGenName $codeGenUrl }}
         {{- $code_gen_service_urls = append $code_gen_service_urls $dictItem }}
         {{- $codeGenImage := printf "%s:%s" .image .tag }}
         {{- $dictItem := printf "\"%s\":\"%s\"" $codeGenName $codeGenImage }}
         {{- $code_gen_images = append $code_gen_images $dictItem }}
         {{ end }}
    {{- end }} 
    CODE_GEN_SERVICE_URLS = { {{ join "," $code_gen_service_urls }} }
    CODE_GEN_IMAGES = { {{ join "," $code_gen_images }} }
    {{- end }}

    {{- $didFinders := list }}
    {{- if .Values.didFinder.CERNOpenData.enabled }}
      {{- $didFinders = append $didFinders "cernopendata" }}
    DID_CERNOPENDATA_FINDER_TAG = '{{ .Values.didFinder.CERNOpenData.tag }}'
    {{- end }}
    {{- if .Values.didFinder.rucio.enabled }}
    DID_RUCIO_FINDER_TAG = '{{ .Values.didFinder.rucio.tag }}'
      {{- $didFinders = append $didFinders "rucio" }}
    {{- end }}

    {{- $defaultScheme := .Values.app.defaultDIDFinderScheme }}
    {{- if and (not $defaultScheme) .Values.didFinder.rucio.enabled }}
    {{- $defaultScheme = "rucio" }}
    {{- end }}
    {{- if and (not $defaultScheme) .Values.didFinder.CERNOpenData.enabled }}
    {{- $defaultScheme = "cernopendata" }}
    {{- end }}
    DID_FINDER_DEFAULT_SCHEME = '{{ $defaultScheme }}'
    VALID_DID_SCHEMES = [ "{{ join "\",\"" $didFinders }}" ]

    {{ if and .Values.logging.logstash.enabled .Values.logging.logstash.monitor }}
    MONITOR_URL = {{ tpl .Values.logging.logstash.monitor . | quote}}
    {{ end }}   
    {{ if and .Values.logging.logstash.enabled .Values.logging.logstash.logs }}
    LOGS_URL = {{ tpl .Values.logging.logstash.logs . | quote}}
    {{ end }}   