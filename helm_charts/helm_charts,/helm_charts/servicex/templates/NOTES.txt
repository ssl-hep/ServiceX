# Welcome to ServiceX
It will take up to one minute for RabbitMQ to start up and allow the other pods
to be able to start successfully.

You can monitor the status with
    kubectl get pods --namespace {{ .Release.Namespace }}
and wait for 1/1 to be ready for the rabbitmq pod.

{{ if .Values.app.ingress.enabled }}
Congratulations! You deployed an ingress for this service. You can access the
REST service at http://{{ .Release.Name }}.{{ .Values.app.ingress.host }}
{{ else }}
To access the REST server you will need to run a Kubernetes Port-Forward:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app={{ .Release.Name }}-servicex-app" -o jsonpath="{.items[0].metadata.name}")
  kubectl port-forward $POD_NAME 5000:5000

{{ end }}

Optionally, you can use a port forward to access the RabbitMQ Dashboard:
  kubectl port-forward --namespace {{ .Release.Namespace }} {{ .Release.Name }}-rabbitmq-0 15672:15672
and then visit http://localhost:15672

{{ if .Values.secrets }}
Log in with 
    username: user
    password: rabbitmq-password from {{ .Values.secrets }} secret that you set up
{{ else }}
{{ if and .Values.rabbitmq.auth.username .Values.rabbitmq.auth.password }}
Log in with
    username: {{ .Values.rabbitmq.auth.username }}
    password: {{ .Values.rabbitmq.auth.password }}
{{ end }}
{{ end }}

{{ if .Values.postgres.enabled }}
You can also connect to the deployed postgres server with your favorite SQL client
  kubectl port-forward --namespace {{ .Release.Namespace }} {{ .Release.Name }}-postgresql-0 5432:5432

and connect with this JDBC Connection String:
{{ if .Values.secrets }}
    postgresql://{{  .Values.postgresql.postgresqlUsername }}:[postgresql-password from {{.Values.secrets}} ]@localhost:5432/{{ .Values.postgresql.postgresqlDatabase }}
{{ else }}
    postgresql://{{  .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@localhost:5432/{{ .Values.postgresql.postgresqlDatabase }}
{{ end }}
{{ end }}

{{ if .Values.objectStore.enabled }}
  {{ if not .Values.objectStore.internal }}
Using an external minio object store at {{ .Values.objectStore.publicURL }}
    {{ if .Values.objectStore.usetls }}
with a https connection. 
    {{ else }}
with a http connection.
    {{ end }}


  {{ else if .Values.minio.ingress.enabled }}
{{- $minio_ingress := index .Values.minio.ingress.hosts 0 -}}

Since you declared an internet ingress to Minio you can access it at
{{ .Values.objectStore.publicURL | default $minio_ingress }}
  {{ else }}
Finally, you can interact with the minio object store with another Port-Forward:
  export MINIO_POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app=minio,release={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  kubectl port-forward $MINIO_POD_NAME 9000:9000

You can use the minio browser by visiting:
    http://localhost:9000
  {{ end }}
{{ if .Values.secrets }}
Log in with minio-accesskey and minio-secretkey from {{ .Values.secrets }} secret that you set up.
{{ else }}
{{if and .Values.minio.accessKey  .Values.minio.secretKey }}
Log in with 
    Access Key: {{ .Values.minio.accessKey }}
    Secret Key: {{ .Values.minio.secretKey }}
{{ end }}
{{ end }}

{{ end }}

