apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "logging.fullname" . }}
  namespace: kube-system
  labels:
    k8s-app: servicex
data:
  filebeat.yml: |-
    setup:
      kibana:
        host: {{ .Values.kibana.host }}
      dashboards:
        enabled: {{ .Values.kibana.dashboards.enabled }}
        kibana-index: {{ .Values.kibana.dashboards.index }}
    filebeat:

      autodiscover:
        providers:
          - type: kubernetes
            node: ${NODE_NAME}
            templates:
              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: {{ .Values.servicex.namespace }}
                    - not:
                        equals: 
                          kubernetes.container.name: rabbitmq
                    - not: 
                        contains: 
                          kubernetes.pod.name: postgresql
                    - not:
                        equals: 
                          kubernetes.container.name: minio
                config:
                  - type: container
                    paths:
                    - /var/log/containers/*${data.kubernetes.container.id}.log
                    processors:
                      - if:
                          or:
                            - regexp:
                                message: "^INFO.*"
                            - regexp:
                                message: "^ERROR.*"
                            - regexp:
                                message: "^CRITICAL.*"
                            - regexp:
                                message: "^WARNING.*"
                            - regexp:
                                message: "^DEBUG.*"
                        then:
                          - dissect:
                              tokenizer: "%{level} %{instance} %{component} %{requestID} %{message}"
                              field: "message"
                              target_prefix: ""
                              overwrite_keys: true
                          - if:
                              regexp:
                                message: "^Metric:"
                            then:
                              - dissect:
                                  tokenizer: "Metric: %{data}"
                                  field: "message"
                                  target_prefix: ""
                                  overwrite_keys: true
                              - decode_json_fields:
                                  fields: [data]
                                  process_array: true
                                  max_depth: 2
                                  target: ""
                                  overwrite_keys: false
                                  add_error_key: true
                              - drop_fields:
                                  fields: ["message", "data"]


              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: {{ .Values.servicex.namespace }}
                    - equals: 
                        kubernetes.container.name: rabbitmq
                config:
                  - module: rabbitmq
                    log:
                      input:
                        type: container
                        paths: 
                          - "/var/log/containers/*rabbit*rabbit*.log"
                      stream: all

              - condition:
                  and:
                    - equals:
                        kubernetes.namespace: {{ .Values.servicex.namespace }}
                    - contains: 
                        kubernetes.pod.name: postgresql
                config:
                  - module: postgresql
                    log:
                      input:
                        type: container
                        paths: 
                          - "/var/log/containers/*postgresql*.log"
                      stream: all


    output.elasticsearch:
      protocol: {{ .Values.elasticsearch.protocol }}
      hosts: ["{{ .Values.elasticsearch.host }}:{{ .Values.elasticsearch.port }}"]
      username: {{ .Values.elasticsearch.user }}
      password: {{ .Values.elasticsearch.pass }}