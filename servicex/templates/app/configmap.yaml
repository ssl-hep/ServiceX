apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-flask-config
  labels:
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app: {{ .Release.Name }}
data:
  app.conf: |
    #SERVER_NAME = '127.0.0.1:5000'
    # this is the session secret, used to protect the Flask session. You should
    # use a longer secret string known only to your application
    # details are beyond the scope of this example
    SECRET_KEY = 'abc123!'

    # Enable JWT auth on public endpoints
    ENABLE_AUTH={{- ternary "True" "False" .Values.app.auth }}

    # Globus configuration
    GLOBUS_CLIENT_ID = '{{ .Values.app.globusClientID }}'
    GLOBUS_CLIENT_SECRET = '{{ .Values.app.globusClientSecret }}'

    # Specify an email address for the first admin user
    JWT_ADMIN = '{{ .Values.app.adminEmail }}'

    # Number of seconds the JWT is valid for
    JWT_REFRESH_TOKEN_EXPIRES={{- ternary .Values.app.tokenExpires "False" .Values.app.tokenExpires }}
    JWT_ACCESS_TOKEN_EXPIRES={{ .Values.app.authExpires }}

    # Slack webhooks
    {{ if .Values.app.slackSigningSecret }}
    SLACK_SIGNING_SECRET = '{{ .Values.app.slackSigningSecret }}'
    {{ end }}
    {{ if .Values.app.newSignupWebhook }}
    SIGNUP_WEBHOOK_URL = '{{ .Values.app.newSignupWebhook }}'
    {{ end }}

    # Mailgun configuration
    MAILGUN_API_KEY = '{{ .Values.app.mailgunApiKey }}'
    MAILGUN_DOMAIN = '{{ .Values.app.mailgunDomain }}'

    {{ if .Values.postgres.enabled }}
    SQLALCHEMY_DATABASE_URI = 'postgresql://{{  .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}'
    {{ else }}
    SQLALCHEMY_DATABASE_URI = 'sqlite:////sqlite/app.db'
    {{ end }}

    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = 'some-secret-string'
    JWT_SECRET_KEY = 'jwt-secret-string'
    RABBIT_MQ_URL= 'amqp://user:{{ .Values.rabbitmq.rabbitmq.password }}@{{ .Release.Name }}-rabbitmq:5672/%2F'
    TRANSFORMER_RABBIT_MQ_URL= 'amqp://user:{{ .Values.rabbitmq.rabbitmq.password }}@{{ .Release.Name }}-rabbitmq:5672/%2F?heartbeat=9000'

    # Keep retrying to connect to Rabbit if its not yet up
    RABBIT_RETRIES = {{ .Values.app.rabbitmq.retries }}
    RABBIT_RETRY_INTERVAL = {{ .Values.app.rabbitmq.retry_interval }}

    ADVERTISED_HOSTNAME= '{{ .Release.Name }}-servicex-app:8000'

    {{ if .Values.hostMount }}
    # This will be mounted into the transformer pod's /data directory
    TRANSFORMER_LOCAL_PATH="{{ .Values.hostMount }}"
    {{ end }}

    TRANSFORMER_NAMESPACE="{{ .Release.Namespace }}"

    TRANSFORMER_PULL_POLICY = '{{ .Values.transformer.pullPolicy }}'

    TRANSFORMER_MANAGER_ENABLED = True

    TRANSFORMER_AUTOSCALE_ENABLED = {{- ternary "True" "False" .Values.transformer.autoscalerEnabled }}
    TRANSFORMER_CPU_LIMIT = {{ .Values.transformer.cpuLimit }}
    TRANSFORMER_CPU_SCALE_THRESHOLD = {{ .Values.transformer.cpuScaleThreshold }}
    TRANSFORMER_MANAGER_MODE = 'internal-kubernetes'
    TRANSFORMER_X509_SECRET="{{ .Release.Name }}-x509-proxy"
    TRANSFORMER_VALIDATE_DOCKER_IMAGE = {{- ternary "True" "False" .Values.app.validateTransformerImage }}

    TRANSFORMER_MESSAGING = 'none'

    {{ if .Values.objectStore.enabled }}
    OBJECT_STORE_ENABLED = True
    MINIO_URL = '{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}'
    MINIO_URL_TRANSFORMER = '{{ .Release.Name }}-minio:{{ .Values.minio.service.port }}'
    MINIO_ACCESS_KEY = '{{ .Values.minio.accessKey }}'
    MINIO_SECRET_KEY = '{{ .Values.minio.secretKey }}'

    {{ if .Values.minio.ingress.enabled }}
    {{- $minio_ingress := index .Values.minio.ingress.hosts 0 -}}
    MINIO_PUBLIC_URL = '{{ .Values.objectStore.publicURL | default $minio_ingress }}'
    MINIO_SECURED = {{ ternary "True" "False" (not (empty .Values.minio.ingress.tls)) }}
    {{ else }}
    {{- $internal_minio := printf "%s--minio:%v" .Release.Name .Values.minio.service.port -}}
    MINIO_PUBLIC_URL = '{{- .Values.objectStore.publicURL | default $internal_minio }}'
    {{ end }}

    {{ else }}
    OBJECT_STORE_ENABLED = False
    {{ end }}

    {{ if .Values.elasticsearchLogging.enabled }}
    ELASTIC_SEARCH_LOGGING_ENABLED = True
    ES_HOST = '{{ .Values.elasticsearchLogging.host }}'
    ES_PORT = '{{ .Values.elasticsearchLogging.port }}'
    ES_USER = '{{ .Values.elasticsearchLogging.user }}'
    ES_PASS = '{{ .Values.elasticsearchLogging.password }}'
    {{ else }}
    ELASTIC_SEARCH_LOGGING_ENABLED = False
    {{ end }}

    {{ if .Values.codeGen.enabled }}
    CODE_GEN_SERVICE_URL = 'http://{{ .Release.Name }}-code-gen:8000'
    {{ end }}
